/**
 */
class Game {

  static int NORTH, SOUTH, EAST, WEST;
  static int GRID_SIZE;
  static int TOP,LEFT,BOTTOM,RIGHT;

  //=> array indexes
  //0,1,2,3
  field int rows,cols, score;
  field boolean gameOver;
  field Array canvas;
  field Worm worm;
  field Munchy food;

  /**
   */
  function Array mkBox(int x1, int y1, int x2, int y2) {
    var Array a;
    let a= Array.new(4);
    let a[LEFT]=x1;
    let a[TOP]=y1;
    let a[RIGHT]=x2;
    let a[BOTTOM]=y2;
    return a;
  }

  /**
   */
  function boolean inbox(Array big, Array box) {
    var int bt, bl, bb, br;
    var int t,l,b,r;

    let t= big[TOP];
    let l= big[LEFT];
    let b= big[BOTTOM];
    let r= big[RIGHT];

    let bt= box[TOP];
    let bl= box[LEFT];
    let bb= box[BOTTOM];
    let br= box[RIGHT];

    return (((bl > l) | (bl = l)) &
            ((br < r) | (br = r)) &
            ((bt > t) | (bt = t)) &
            ((bb < b) | (bb = b)));
  }

  /**
   */
  function int north() { return NORTH; }
  function int south() { return SOUTH; }
  function int east() { return EAST; }
  function int west() { return WEST; }

  /**
   */
  function int bottom() { return BOTTOM; }
  function int top() { return TOP; }
  function int left() { return LEFT; }
  function int right() { return RIGHT; }

  /**
   */
  constructor Game ctor() {

    let GRID_SIZE=8;

    let TOP=0;
    let LEFT=1;
    let BOTTOM=2;
    let RIGHT=3;

    let NORTH= 131;
    let SOUTH=133;
    let EAST=132;
    let WEST=130;

    let gameOver=false;
    let score=0;
    return this;
  }

  /**
   */
  method void initCanvas() {
    // screen= 256 x 512
    // grid of 32 x 64 [8]
    var int t,l,b,r;
    let t=0;
    let l=0;
    let r=512;
    let b=30 * GRID_SIZE;
    do Screen.clearScreen();
    do Screen.setColor(true);

    //top line
    do Screen.drawRectangle(0,0, r-1, GRID_SIZE-1);
    // bottom line
    do Screen.drawRectangle(0,b-GRID_SIZE, r-1,b-1);
    //left line
    do Screen.drawRectangle(0,0, GRID_SIZE-1,b-1);
    //right line
    do Screen.drawRectangle(r-GRID_SIZE, 0, r-1, b-1);

    let canvas=Array.new(4);
    let canvas[TOP]= t + GRID_SIZE;
    let canvas[LEFT]= l + GRID_SIZE;
    let canvas[RIGHT]= r - GRID_SIZE - 1;
    let canvas[BOTTOM]= b -GRID_SIZE - 1;

    let rows= 1 + ((canvas[BOTTOM] - canvas[TOP]) / GRID_SIZE);
    let cols= 1 + ((canvas[RIGHT] - canvas[LEFT]) / GRID_SIZE);

    return;
  }

  /**
   */
  method boolean collide(Array a, Array b) {
    return ~ ((b[LEFT] > a[RIGHT]) |
              (b[RIGHT] < a[LEFT]) |
              (b[BOTTOM] < a[TOP]) |
              (b[TOP] > a[BOTTOM]));
  }

  /**
   */
  method int updateScore(int n) {
    let score=score+n;
    return score;
  }

  /**
   */
  method void endScene() {
    do Output.moveCursor(22, (64-10)/2);
    do Output.printString("Game Over!");
    return;
  }

  /**
   */
  method void start() {
    let gameOver=false;
    let score = 0;
    do LCGRandom.setSeed(17011);
    do initCanvas();
    let worm= Worm.ctor(canvas, GRID_SIZE, WEST);
    let food= Munchy.ctor(GRID_SIZE);
    do gameLoop();
    return;
  }

  /**
   */
  method void randFood() {
    var int r, x, y;
    let r= LCGRandom.rand();
    let r = LCGRandom.mod(r, rows);
    if (r < 1) { let r = 23; }
    if (~ (r < rows)) { let r= 23; }
    let y= GRID_SIZE * r;

    let r= LCGRandom.rand();
    let r = LCGRandom.mod(r, cols);
    if (r < 1) { let r = 47; }
    if (~ (r < cols)) { let r= 47; }
    let x= GRID_SIZE * r;

    if (food.position(canvas, x, y)) {
      do food.show();
    } else {
      do randFood();
    }
    return;
  }

  /**
   */
  method void gameLoop() {
    var int key;
    let key=0;

    do randFood();
    while (~ gameOver) {
      let key = input();
      do update(key);
      do render();
      do Sys.wait(200);
    }

    do endScene();
    return;
  }

  /**
   */
  method int input() {
    return Keyboard.keyPressed();
  }

  /**
   */
  method boolean moveOK() {
    if (worm.oobound(canvas) |
        worm.overlap()) {
      return false;
    } else {
      return true;
    }
  }

  /**
   */
  method void update(int key) {

    do worm.move(key);

    if (~ moveOK()) { let gameOver=true; } else {
      if (collide(worm.bbox(), food.bbox())) {
        do updateScore(1);
        do food.hide();
        do worm.grow();
        do randFood();
      }
    }

    return;
  }

  /**
   */
  method void printScore() {
    do Output.moveCursor(22,1);
    do Output.printString("Score: ");
    if (score < 100) {
      if (score < 10) {
        do Output.printString("00");
      } else {
        do Output.printString("0");
      }
    }
    do Output.printInt(score);
    return;
  }

  method void render() {
    do printScore();
    do worm.render();
    return;
  }

  /**
   */
  method void finz() {
    //do fruit.finz();
    do Memory.deAlloc(canvas);
    do worm.finz();
    do Memory.deAlloc(this);
    return;
  }

}

