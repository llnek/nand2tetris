/**
 */
class Game {

  static int NORTH, SOUTH, EAST, WEST;
  static int WALL_SIZE, WORM_SIZE;
  static int TOP,LEFT,BOTTOM,RIGHT;
  //=> array indexes
  //0,1,2,3
  field boolean gameOver;
  field int dir;
  field int score;
  field Array canvas;
  field Worm worm;

  /**
   */
  function Array mkBox(int x1, int y1, int x2, int y2) {
    var Array a;
    let a= Array.new(4);
    let a[LEFT]=x1;
    let a[TOP]=y1;
    let a[RIGHT]=x2;
    let a[BOTTOM]=y2;
    return a;
  }

  /**
   */
  function int north() { return NORTH; }
  function int south() { return SOUTH; }
  function int east() { return EAST; }
  function int west() { return WEST; }

  /**
   */
  function int bottom() { return BOTTOM; }
  function int top() { return TOP; }
  function int left() { return LEFT; }
  function int right() { return RIGHT; }


  /**
   */
  constructor Game ctor() {

    let WORM_SIZE=8;
    let WALL_SIZE=4;

    let TOP=0;
    let LEFT=1;
    let BOTTOM=2;
    let RIGHT=3;

    let NORTH= 131;
    let SOUTH=133;
    let EAST=132;
    let WEST=130;

    let gameOver=false;
    let score=0;
    let dir= WEST;

    return this;
  }

  /**
   */
  method void initCanvas() {
    // screen= 256 x 512
    var int t,l,b,r;
    let t=0;
    let l=0;
    let r=512;
    let b=256;
    do Screen.clearScreen();
    do Screen.setColor(true);
    do Screen.drawRectangle(0,b-WALL_SIZE, r-1,b-1);
    do Screen.drawRectangle(0,0, r-1, WALL_SIZE-1);
    do Screen.drawRectangle(0,0, WALL_SIZE-1,b-1);
    do Screen.drawRectangle(r-WALL_SIZE, 0, r-1, b-1);
    let canvas=Array.new(4);
    let canvas[TOP]= WALL_SIZE;
    let canvas[LEFT]= WALL_SIZE;
    let canvas[RIGHT]= r - WALL_SIZE - 1;
    let canvas[BOTTOM]= b-WALL_SIZE - 1;
    return;
  }

  /**
   */
  method boolean collide(Array a, Array b) {
    return ~ ((b[LEFT] > a[RIGHT]) |
              (b[RIGHT] < a[LEFT]) |
              (b[BOTTOM] < a[TOP]) |
              (b[TOP] > a[BOTTOM]));
  }

  /**
   */
  method int updateScore(int n) {
    let score=score+n;
    return score;
  }

  /**
   */
  method void endScene() {
    //do Output.printString("Game Over!");
    return;
  }

  /**
   */
  method void start() {
    let gameOver=false;
    let score = 0;
    do initCanvas();
    let worm= Worm.ctor(canvas, WORM_SIZE, dir);
    do gameLoop();
    return;
  }

  /**
   */
  method void gameLoop() {
    var int key;
    let key=0;

    while (~ gameOver) {
      let key = input();
      do update(key);
      do render();
      do Sys.wait(16);
    }

    return;
  }

  /**
   */
  method int input() {
    return Keyboard.keyPressed();
  }

  /**
   */
  method boolean moveOK() {
    return true;
  }

  /**
   */
  method void update(int key) {

    do move(key);

    if (~ moveOK()) { let gameOver=true; } else {
/*
      if (collide(worm.bbox(),
                  fruit.bbox())) {
        do updateScore(1);
        do fruit.hide();
        do worm.grow();
        do fruit.regen();
      }
*/
    }

    return;
  }

  /**
   */
  method void render() {
    //do Output.printString("Score: ");
    //do Output.printInt(score);
    if (gameOver) {
      do endScene();
    } else {
      do worm.render();
    }
    return;
  }

  /**
   */
  method void move(int key) {
    if ((key = NORTH) & ~ (dir = SOUTH)) {
      let dir = NORTH;
    }
    if ((key = SOUTH) & ~ (dir = NORTH)) {
      let dir = SOUTH;
    }
    if ((key = WEST) & ~ (dir = EAST)) {
      let dir = WEST;
    }
    if ((key = EAST) & ~ (dir = WEST)) {
      let dir = EAST;
    }
    do worm.move(dir);
    return;
  }

  /**
   */
  method void finz() {
    //do fruit.finz();
    do Memory.deAlloc(canvas);
    do worm.finz();
    do Memory.deAlloc(this);
    return;
  }

}

