/**
 */
class Game {
  // 0=none,1=up,2=right,3=down,4=left
  static int RIGHT,LEFT,DOWN,UP;
  field Fruit fruit;
  field Worm worm;
  field int dir;

  //top,left,bottom,right => array indexes

  /**
   */
  constructor Game ctor() {
    let RIGHT=132;
    let DOWN=133;
    let LEFT=130;
    let UP= 131;
    let dir=0;
    return this;
  }

  /**
   */
  method boolean collide(Array a, Array b) {
    return ~ ((b[LEFT] > a[RIGHT]) |
              (b[RIGHT] < a[LEFT]) |
              (b[BOTTOM] < a[TOP]) |
              (b[TOP] > a[BOTTOM]));
  }

  /**
   */
  method int updateScore(int n) {
    let score=score+n;
    return score;
  }

  /**
   */
  method void endScene() {
    do Output.printString("Game Over!");
    return;
  }

  /**
   */
  method void start() {
    let worm = Worm.ctor();
    let fruit = fruit.ctor(worm);
    let gameOver=false;
    let score = 0;
    do gameLoop();
    return;
  }

  /**
   */
  method void gameLoop() {
    var int key;
    let key=0;

    while (~ gameOver) {
      let key = input();
      do update(key);
      do render();
      do Sys.wait(16);
    }

    return;
  }

  /**
   */
  method int input() {
    return Keyboard.keyPressed();
  }

  /**
   */
  method boolean moveOK() {
    return true;
  }

  /**
   */
  method void update(int key) {

    do move(key);

    if (~ moveOK()) { let gameOver=true; } else {

      if (collide(worm.bbox(),
                  fruit.bbox())) {
        do updateScore(1);
        do fruit.hide();
        do worm.grow();
        do fruit.regen();
      }

    }

    return;
  }

  /**
   */
  method void render() {
    do Output.printString("Score: ");
    do Output.printInt(score);
    if (gameOver) {
      do endScene();
    } else {
      do fruit.render();
      do worm.render();
    }
    return;
  }

  /**
   */
  method void move(int key) {
    if ((key = UP) & ~ (dir = DOWN)) {
      let dir = UP;
    }
    if ((key = DOWN) & ~ (dir = UP)) {
      let dir = DOWN;
    }
    if ((key = LEFT) & ~ (dir = RIGHT)) {
      let dir = LEFT;
    }
    if ((key = RIGHT) & ~ (dir = LEFT)) {
      let dir = RIGHT;
    }
    worm.move(dir);
  }

  /**
   */
  method void finz() {
    do fruit.finz();
    do worm.finz();
    do Memory.deAlloc(this);
    return;
  }

}

