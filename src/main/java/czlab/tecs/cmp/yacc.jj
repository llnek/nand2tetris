

options {
  //FORCE_LA_CHECK=true;
  LOOKAHEAD=2;
  STATIC=false;
}

PARSER_BEGIN(JackParser)
package czlab.tecs.cmp;

public class JackParser {

  public String compileOneUnit() throws Exception {
    return this.compileClazz();
  }

  private String strit(Object obj) {
    String s;
    if (obj instanceof Token) {
      s=((Token) obj).image;
    } else {
      s= obj.toString();
    }
    return s;
  }

  private String xrefType(Object obj) {
    if (obj instanceof Token) {
      return vtag("keyword", obj);
    } else {
      return vtag("identifier", obj);
    }
  }

  private String stag(Object obj, boolean b) {
    return "<" + strit(obj) + ">" + (b ? "\n" : "");
  }

  private String stag(Object obj) {
    return stag(obj,true);
  }

  private String etag(Object obj, boolean b) {
    return "</" + strit(obj) + ">" + (b ? "\n" : "");
  }

  private String etag(Object obj) {
    return etag(obj,true);
  }

  private String vtag(Object tag, Object obj) {
    String t= strit(tag);
    String s= strit(obj);
    if ("symbol".equals(t)) {
      if (">".equals(s)) {
        s="&gt;";
      } else if ("<".equals(s)) {
        s="&lt;";
      } else if ("&".equals(s)) {
        s="&amp;";
      }
    }
    return stag(t,false) + s + etag(t, true);
  }
}

PARSER_END(JackParser)

SKIP :
{
  < " " >
  | < "\t" >
  | < "\n" >
  | < "\r" >
  | < "//" (~["\n"])* "\n" >
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}


/**********************************************
 * THE Jack TOKEN SPECIFICATION STARTS HERE *
 **********************************************/

TOKEN :
{
  < CLASS: "class" >
  | < CONSTRUCTOR: "constructor" >
  | < FUNCTION: "function" >
  | < METHOD: "method" >
  | < FIELD: "field" >
  | < STATIK: "static" >
  | < VAR: "var" >
  | < INT: "int" >
  | < CHAR: "char" >
  | < BOOLEAN: "boolean" >
  | < VOID: "void" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < NULL: "null" >
  | < THIS: "this" >
  | < LET: "let" >
  | < DO: "do" >
  | < IF: "if" >
  | < ELSE: "else" >
  | < WHILE: "while" >
  | < RETURN: "return" >
  | < LCURLY: "{" >
  | < RCURLY: "}" >
  | < LPAREN: "(" >
  | < RPAREN: ")" >
  | < LBRAC: "[" >
  | < RBRAC: "]" >
  | < DOT: "." >
  | < COMMA: "," >
  | < SEMICOLON: ";" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < STAR: "*" >
  | < SLASH: "/" >
  | < AND: "&" >
  | < BAR: "|" >
  | < LT: "<" >
  | < GT: ">" >
  | < EQ: "=" >
  | < TILDA: "~" >

}

TOKEN :
{
  < QSTRING: "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" >
  |
  < NUMBER: "0" | ["1" - "9"] (["0" - "9"])* >
}

TOKEN :
{
  < IDENTIFIER: <ALPHA> (<ALPHA>|<DIGIT>)* >
  |
  < #ALPHA: "_" | ["a"-"z", "A"-"Z"]>
  |
  < #DIGIT: ["0"-"9"]>
}

TOKEN :
{
  < SCOPEDINVOKER: <IDENTIFIER> <DOT> <IDENTIFIER> >
}

/************************************************
 * THE Jack GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
//kenl
String compileClazz():
{ StringBuilder bf=new StringBuilder();
  String dv, ds;
  Token cz, cn, lc, rc; }
{
  cz=<CLASS> cn=className() lc=<LCURLY>
  (dv=classVarDec() {
    //if (bf.length()> 0) { bf.append("\n"); }
    bf.append(dv);
  })*
  (ds=subroutineDec() {
    //if (bf.length()> 0) { bf.append("\n"); }
    bf.append(ds);
  })*
  rc=<RCURLY> {
    return
    stag("class") +
    vtag("keyword", cz) +
    vtag("identifier", cn) +
    vtag("symbol", lc) +
    bf +
    vtag("symbol", rc) +
    etag("class");
  }
}

//////////////////////////////////////////////////////////////////////////////
//
String classVarDec():
{ StringBuilder bf=new StringBuilder();
  Object t;
  Token sc, c, v1, vn, q; }
{
  (q=<STATIK> | q=<FIELD>)
  t=type()
  v1=varName()
  (c=<COMMA> vn=varName() {
    bf.
    append(vtag("symbol",c)).
    append(vtag("identifier", vn));
  })*
  sc=<SEMICOLON> {
    return stag("classVarDec") +
    vtag("keyword", q) +
    xrefType(t) +
    vtag("identifier", v1) +
    bf +
    vtag("symbol", sc) +
    etag("classVarDec");
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Object type():
{ Token t, z; }
{
  t=<INT> { return t; } |
  t=<CHAR> { return t; } |
  t=<BOOLEAN> { return t; } |
  z=className() { return z.image; }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String subroutineDec():
{ StringBuilder bf= new StringBuilder();
  String pml, sby;
  Object rt;
  Token ft, sn, lp, rp; }
{
  (ft=<CONSTRUCTOR> | ft=<FUNCTION> | ft=<METHOD>)
  (rt=<VOID> | rt=type())
  sn=subroutineName() lp=<LPAREN>
  pml=parameterList()
  rp=<RPAREN>
  sby=subroutineBody() {
    return stag("subroutineDec") +
    vtag("keyword", ft) +
    xrefType(rt) +
    vtag("identifier", sn) +
    vtag("symbol", lp) +
    pml +
    vtag("symbol", rp) +
    sby +
    etag("subroutineDec");
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String parameterList():
{ StringBuilder bf= new StringBuilder();
  Token vn, c, vn99;
  Object t2, t;}
{
  ((t=type() vn=varName() {
    bf.append(xrefType(t)).
    append(vtag("identifier",vn));
    })
   (c=<COMMA> t2=type() vn99=varName() {
    bf.append(vtag("symbol", c)).
    append(xrefType(t2)).
    append(vtag("identifier", vn99));
    })*)? {
    return stag("parameterList") + bf +
    etag("parameterList");
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String subroutineBody():
{ StringBuilder bf= new StringBuilder();
  Token lc, rc;
  String v, ss;}
{
  lc=<LCURLY> (v=varDec() {
    bf.append(v);
      })* ss=statements() rc=<RCURLY> {
    return stag("subroutineBody") +
    vtag("symbol", lc) +
    bf + ss +
    vtag("symbol", rc) +
    etag("subroutineBody");
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String varDec():
{ StringBuilder bf= new StringBuilder();
  Token vn, vn2, v, c, sc;
  Object t;}
{
  v=<VAR> t=type() vn=varName()
    (c=<COMMA> vn2=varName() {
      bf.append(vtag("symbol",c)).
      append(vtag("identifier", vn2));
     })* sc=<SEMICOLON> {
    return stag("varDec") +
    vtag("keyword",v) +
    xrefType(t) +
    vtag("identifier", vn) +
    bf +
    vtag("symbol", sc) +
    etag("varDec");
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String statements():
{ StringBuilder bf= new StringBuilder();
  String s; }
{
  (s=statement() {
    bf.append(s);
   })* {
    return stag("statements") + bf +
    etag("statements");
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String statement():
{ String s; }
{
  s= letStatement() { return s; } |
  s= ifStatement() { return s; } |
  s= whileStatement() { return s; } |
  s= doStatement() { return s; } |
  s= returnStatement() { return s; }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String letStatement():
{ StringBuilder bf=new StringBuilder();
  Token vn, l, lb, rb, eq, sc;
  String e1, e2; }
{
  l=<LET> vn=varName()
    (lb=<LBRAC> e1=expr() rb=<RBRAC> {
      bf.append(vtag("symbol", lb)).
      append(e1).
      append(vtag("symbol", rb));
     })? eq=<EQ> e2=expr() sc=<SEMICOLON> {
    return stag("letStatement") +
    vtag("keyword", l) +
    vtag("identifier", vn) +
    bf +
    vtag("symbol", eq) +
    e2 +
    vtag("symbol", sc) +
    etag("letStatement");
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String ifStatement():
{ Token i, lp, rp, lc, rc, e, lc2, rc2;
  StringBuilder bf=new StringBuilder();
  String ex, ss, ss2; }
{
  i=<IF> lp=<LPAREN> ex=expr() rp=<RPAREN>
  lc=<LCURLY> ss=statements() rc=<RCURLY>
  (e=<ELSE> lc2=<LCURLY> ss2=statements() rc2=<RCURLY> {
    bf.append(vtag("symbol",e)).
    append(vtag("symbol", lc2)).
    append(ss2).
    append(vtag("symbol", rc2));
   })? {
    return stag("ifStatement") +
    vtag("keyword",i) +
    vtag("symbol", lp) + ex + vtag("symbol", rp) +
    vtag("symbol", lc) + ss + vtag("symbol", rc) +
    bf +
    etag("ifStatement");
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String whileStatement():
{ Token w, lp, rp, lc, rc;
  String ss, e;}
{
  w=<WHILE> lp=<LPAREN> e=expr() rp=<RPAREN>
    lc=<LCURLY> ss=statements() rc=<RCURLY> {
    return stag("whileStatement") +
    vtag("keyword", w) +
    vtag("symbol", lp) +
    e +
    vtag("symbol", rp) +
    vtag("symbol", lc) +
    ss +
    vtag("symbol", rc) +
    etag("whileStatement");
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String doStatement():
{ Token sc, d;
  String s; }
{
  d=<DO> s=subroutineCall() sc=<SEMICOLON> {
    return stag("doStatement") +
    vtag("keyword", d) +
    s +
    vtag("symbol", sc) +
    etag("doStatement");
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String returnStatement():
{ Token r, sc;
  String e;}
{
  r=<RETURN> sc=<SEMICOLON> {
    return stag("returnStatement") +
    vtag("keyword", r) +
    vtag("symbol", sc) +
    etag("returnStatement");
  } |
  r=<RETURN> e=expr() sc=<SEMICOLON> {
    return stag("returnStatement") +
    vtag("keyword", r) + e +
    vtag("symbol", sc) +
    etag("returnStatement");
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String expr():
{ StringBuilder bf= new StringBuilder();
  Token p;
  String t1, t5;}
{
  t1=term() (p=op() t5=term() {
      bf.append(vtag("symbol",p) + t5);
      })* {
    return stag("expression") +
           t1 + bf + etag("expression");
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String term():
{ Token u, lp, rp, lb, rb;
  Object t;
  String t3, sc, e89, e99; }
{
  t=integerConstant() {
    return stag("term") +
           vtag("integerConstant", t) + etag("term");
  } |
  t=stringConstant() {
    return stag("term") +
           vtag("stringConstant", t) + etag("term");
  } |
  t=keywordConstant() {
    return stag("term") +
           vtag("keyword", t) + etag("term");
  } |
  t=varName() lb=<LBRAC> e89=expr() rb=<RBRAC> {
    return stag("term") +
           vtag("identifier", t) +
           vtag("symbol",lb) +
           e89 +
           vtag("symbol",rb) +
           etag("term");
  } |
  sc=subroutineCall() {
    return stag("term") + sc + etag("term");
  } |
  t=varName() {
    return stag("term") +
           vtag("identifier", t) + etag("term");
  } |
  lp=<LPAREN> e99=expr() rp=<RPAREN> {
    return stag("term") +
           vtag("symbol", lp) +
           e99 +
           vtag("symbol", rp) +
           etag("term");
  } |
  u=unaryOp() t3=term() {
    return stag("term") +
           vtag("symbol", u) +
           t3 +
           etag("term");
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String subroutineCall():
{ Token sn, lp, rp;
  String exl;
  String[] sc; }
{
  sn=subroutineName() lp=<LPAREN> exl=exprList() rp=<RPAREN> {
    return
    vtag("identifier", sn) +
    vtag("symbol", lp) +
    exl +
    vtag("symbol", rp);
  } |
  sc=scopedCall() lp=<LPAREN> exl=exprList() rp=<RPAREN> {
    return
    vtag("identifier", sc[0]) +
    vtag("symbol", ".") +
    vtag("identifier", sc[1]) +
    vtag("symbol", lp) +
    exl +
    vtag("symbol", rp);
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String exprList():
{ StringBuilder bf= new StringBuilder();
  String e2, e1=null;
  Token c; }
{
  (e1=expr() (c=<COMMA> e2=expr() {
               bf.append(vtag("symbol", c)).append(e2);
              })*)? {
    if (e1 != null) {
      return stag("expressionList") +
             e1 + bf + etag("expressionList");
    } else {
      return stag("expressionList") +
             etag("expressionList");
    }
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String[] scopedCall():
{ Token t; }
{
  t= <SCOPEDINVOKER> {
    //System.out.println("scopedinvoker= " + t.image);
    return t.image.split("\\.");
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token op():
{ Token t; }
{
  t=<PLUS> { return t; } |
  t=<MINUS> { return t; } |
  t=<STAR> { return t; } |
  t=<SLASH> { return t; } |
  t=<AND> { return t; } |
  t=<BAR> { return t; } |
  t=<LT> { return t; } |
  t=<GT> { return t; } |
  t=<EQ> { return t; }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token unaryOp():
{ Token t; }
{
  t= <MINUS> { return t; } |
  t= <TILDA> { return t; }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token integerConstant():
{ Token t; }
{ t= <NUMBER> { return t; } }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String stringConstant():
{ String s; Token t; }
{
  t=<QSTRING> {
    s=t.image;
    return s.substring(1, s.length()-1);
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token keywordConstant():
{ Token t; }
{
  t=<TRUE> { return t; } |
  t=<FALSE> { return t; } |
  t=<NULL> { return t; } |
  t=<THIS> { return t; }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token subroutineName():
{ Token t; }
{ t=<IDENTIFIER> { return t; } }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token className():
{ Token t; }
{ t=<IDENTIFIER> { return t; } }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token varName():
{ Token t; }
{ t=<IDENTIFIER> { return t; } }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//EOF



