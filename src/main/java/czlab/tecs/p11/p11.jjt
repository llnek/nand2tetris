

options {
  NODE_DEFAULT_VOID = true;
  NODE_CLASS="ASTNode";
  NODE_PREFIX = "";
  MULTI=true;
  LOOKAHEAD=2;
  STATIC=true;
}

PARSER_BEGIN(ASTGentor)
package czlab.tecs.p11;

import java.util.ArrayList;
import java.util.List;

public class ASTGentor {

  public static SimpleNode parseOneUnit()
  throws Exception {
    return parseClazz();
  }

}

PARSER_END(ASTGentor)

SKIP :
{
  < " " >
  | < "\t" >
  | < "\n" >
  | < "\r" >
  | < "//" (~["\n"])* "\n" >
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}


/**********************************************
 * THE Jack TOKEN SPECIFICATION STARTS HERE *
 **********************************************/

TOKEN :
{
  < CLASS: "class" >
  | < CONSTRUCTOR: "constructor" >
  | < FUNCTION: "function" >
  | < METHOD: "method" >
  | < FIELD: "field" >
  | < STATIK: "static" >
  | < VAR: "var" >
  | < INT: "int" >
  | < CHAR: "char" >
  | < BOOLEAN: "boolean" >
  | < VOID: "void" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < NULL: "null" >
  | < THIS: "this" >
  | < LET: "let" >
  | < DO: "do" >
  | < IF: "if" >
  | < ELSE: "else" >
  | < WHILE: "while" >
  | < RETURN: "return" >
  | < LCURLY: "{" >
  | < RCURLY: "}" >
  | < LPAREN: "(" >
  | < RPAREN: ")" >
  | < LBRAC: "[" >
  | < RBRAC: "]" >
  | < DOT: "." >
  | < COMMA: "," >
  | < SEMICOLON: ";" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < STAR: "*" >
  | < SLASH: "/" >
  | < AND: "&" >
  | < BAR: "|" >
  | < LT: "<" >
  | < GT: ">" >
  | < EQ: "=" >
  | < TILDA: "~" >

}

TOKEN :
{
  < QSTRING: "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" >
  |
  < NUMBER: "0" | ["1" - "9"] (["0" - "9"])* >
}

TOKEN :
{
  < IDENTIFIER: <ALPHA> (<ALPHA>|<DIGIT>)* >
  |
  < #ALPHA: "_" | ["a"-"z", "A"-"Z"]>
  |
  < #DIGIT: ["0"-"9"]>
}

TOKEN :
{
  < SCOPEDINVOKER: <IDENTIFIER> <DOT> <IDENTIFIER> >
}

/************************************************
 * THE Jack GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
//kenl
ClassDec parseClazz() #ClassDec :
{Token z;}
{
  <CLASS> z=className() <LCURLY>
  (classVarDec())*
  (subroutineDec())*
  <RCURLY> {
    jjtThis.props.put("name", z.image);
    return jjtThis;
  }
}

//////////////////////////////////////////////////////////////////////////////
//
void classVarDec() #ClassVarDec :
{List<String> vs= new ArrayList<String>();
 Token v, t;
 String q="";}
{
  [<STATIK> {q=token.image;} |
   <FIELD> {q=token.image;}]
  t=type()
  v=varName()
  { vs.add(v.image); }
  (<COMMA> v=varName()
  { vs.add(v.image); })* <SEMICOLON> {
    jjtThis.props.put("qualifier", q);
    jjtThis.props.put("type", t.image);
    jjtThis.props.put("vars", vs);
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token type() :
{}
{
  <INT>  { return token;} |
  <CHAR>  { return token;} |
  <BOOLEAN> { return token;} |
  //classNAme()
  <IDENTIFIER> { return token;}
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void subroutineDec() #SubroutineDec :
{String r="", q="";
 Object vs=null;
 Object pml=null;
 ASTNode ss;
 Token sn,t;}
{
  [<CONSTRUCTOR> {q=token.image;} |
   <FUNCTION> {q=token.image;} |
   <METHOD> {q=token.image;}]
  [<VOID> {r=token.image;} |
   t=type() {r=t.image;}]
  sn=subroutineName()
  <LPAREN>
  pml=parameterList()
  <RPAREN>
  <LCURLY> (vs=varDec())* statements() <RCURLY> {
    jjtThis.props.put("qualifier", q);
    jjtThis.props.put("type", r);
    jjtThis.props.put("name", sn);
    if (pml != null) {
      jjtThis.props.put("args", pml);
    }
    if (vs != null) {
      jjtThis.props.put("vars", vs);
    }
    ss=(ASTNode)jjtThis.popChild();
    jjtThis.nested.put("statements",ss.popAll());
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Object parameterList() :
{List<String> ps= new ArrayList<String>();
 Token vn, t;}
{
  ((t=type() vn=varName() {
    ps.add(t.image); ps.add(vn.image);
    })
   (<COMMA> t=type() vn=varName() {
    ps.add(t.image); ps.add(vn.image);
    })*)? {
    return ps;
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Object varDec() :
{List<String> ps=new ArrayList<String>();
Token vn, t;}
{
  <VAR> t=type() vn=varName() {
    ps.add(t.image); ps.add(vn.image);
  }
  (<COMMA> vn=varName() {
    ps.add(t.image); ps.add(vn.image);
   })* <SEMICOLON> {
    return ps;
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void statements() #Statements :
{}
{
  (statement())*
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void statement() :
{}
{
  letStatement()  |
  ifStatement()  |
  whileStatement()  |
  doStatement()  |
  returnStatement()
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void letStatement() #LetStatement :
{Token vn;}
{
  <LET> vn=varName()
  (<LBRAC> expr() <RBRAC>)?
  <EQ> expr() <SEMICOLON> {
    jjtThis.props.put("varr", vn.image);
    int cnt= jjtThis.jjtGetNumChildren();
    if (cnt == 2) {
      jjtThis.nested.put("lhs", jjtThis.jjtGetChild(0));
      jjtThis.nested.put("rhs", jjtThis.jjtGetChild(1));
    } else {
      jjtThis.nested.put("rhs", jjtThis.jjtGetChild(0));
    }
    jjtThis.removeChildren();
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void ifStatement() #IfStatement :
{ASTNode n;}
{
  <IF> <LPAREN> expr() <RPAREN>
  <LCURLY> statements() <RCURLY> #IfBlock(1)
  (<ELSE> <LCURLY> statements() <RCURLY> #ElseBlock(1))? {
    jjtThis.nested.put("test", jjtThis.popChild());
    n= (ASTNode)jjtThis.popChild(); //if
    jjtThis.nested.put("if", n.popChild().popAll());
    n= (ASTNode)jjtThis.popChild(); //else?
    if (n != null) {
      jjtThis.nested.put("else", n.popChild().popAll());
    }
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void whileStatement() #WhileStatement :
{}
{
  <WHILE> <LPAREN> expr() <RPAREN>
    <LCURLY> statements() <RCURLY> #WhileBlock(1) {
    jjtThis.nested.put("test", jjtThis.popChild());
    jjtThis.nested.put("body", jjtThis.popChild().popChild().popAll());
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void doStatement() #DoStatement :
{}
{
  <DO> subroutineCall() <SEMICOLON> {
    jjtThis.nested.put("call", jjtThis.popChild());
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void returnStatement() #ReturnStatement :
{}
{
  <RETURN> <SEMICOLON> |
  <RETURN> expr() <SEMICOLON> {
    jjtThis.nested.put("value", jjtThis.popChild());
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void expr() #Expression :
{}
{
  term() (op() term())*
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void term() #Term :
{Object e=null;
 String s;
 Token t, vn;}
{
  <LPAREN> expr() <RPAREN> {
    jjtThis.nested.put("group", jjtThis.popChild());
  } |
  t=unaryOp() term() {
    jjtThis.nested.put("unary", t.image);
    jjtThis.nested.put("term", jjtThis.popChild());
  } |
  t= integerConstant() {
    jjtThis.nested.put("literal", "int");
    jjtThis.value=t.image;
  } |
  s=stringConstant() {
    jjtThis.nested.put("literal", "String");
    jjtThis.value=s;
  }  |
  t=keywordConstant() {
    jjtThis.nested.put("literal", "keyword");
    jjtThis.value=t.image;
  } |
  subroutineCall() |
  vn=varName() <LBRAC> expr() <RBRAC>  {
    jjtThis.nested.put("index", jjtThis.popChild());
    jjtThis.nested.put("varr", vn.image);
  } | vn=varName() {
    jjtThis.nested.put("varr", vn.image);
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void subroutineCall() #SubroutineCall :
{Token sn;}
{
  sn=subroutineName()
    <LPAREN> exprList() <RPAREN> {
    jjtThis.nested.put("target", sn.image);
    jjtThis.nested.put("params", jjtThis.popChild().popAll());
  } |
  sn=scopedCall()
  <LPAREN> exprList() <RPAREN> {
    jjtThis.nested.put("target", sn.image);
    jjtThis.nested.put("params", jjtThis.popChild().popAll());
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void exprList() #ExpressionList :
{}
{
  (expr() (<COMMA> expr() )*)?
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token scopedCall() :
{}
{
  <SCOPEDINVOKER> {
    //System.out.println("scopedinvoker= " + t.image);
    //return t.image.split("\\.");
    return token;
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void op() #OP :
{}
{
  //precedence top to bottom
  <BAR> {
    jjtThis.nested.put("bind", "left");
    jjtThis.nested.put("rank", 13);
    jjtThis.value=token.image;} |
  <AND> {
    jjtThis.nested.put("bind", "left");
    jjtThis.nested.put("rank", 12);
    jjtThis.value=token.image;} |
  <EQ> {
    jjtThis.nested.put("bind", "left");
    jjtThis.nested.put("rank", 8);
    jjtThis.value=token.image;} |
  <LT> {
    jjtThis.nested.put("bind", "left");
    jjtThis.nested.put("rank", 7);
    jjtThis.value=token.image;} |
  <GT> {
    jjtThis.nested.put("bind", "left");
    jjtThis.nested.put("rank", 7);
    jjtThis.value=token.image;} |
  <STAR> {
    jjtThis.nested.put("bind", "left");
    jjtThis.nested.put("rank", 4);
    jjtThis.value=token.image;} |
  <SLASH> {
    jjtThis.nested.put("bind", "left");
    jjtThis.nested.put("rank", 4);
    jjtThis.value=token.image;} |
  <PLUS> {
    jjtThis.nested.put("bind", "right");
    jjtThis.nested.put("rank", 2);
    jjtThis.value=token.image;} |
  <MINUS> {
    jjtThis.nested.put("bind", "right");
    jjtThis.nested.put("rank", 2);
    jjtThis.value=token.image;}
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token unaryOp() :
{}
{
  <MINUS> {return token;} |
  <TILDA> {return token;}
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token integerConstant() :
{}
{ <NUMBER> { return token;} }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
String stringConstant() :
{String s;}
{
  <QSTRING> {
    s=token.image;
    return s.substring(1,s.length()-1);
  }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token keywordConstant() :
{}
{
  <TRUE> { return token; } |
  <FALSE> { return token; } |
  <NULL> { return token; } |
  <THIS> { return token; }
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token subroutineName() :
{}
{
  <IDENTIFIER> { return token;}
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token className() :
{}
{
  <IDENTIFIER> {return token;}
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
Token varName() :
{}
{
  <IDENTIFIER> { return token;}
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//EOF



