/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. tree.jj */
/*@egen*/

options {
                           
                   
             
  //FORCE_LA_CHECK=true;
  LOOKAHEAD=2;
  STATIC=false;
}

PARSER_BEGIN(ASTGentor)
package czlab.tecs.ast;

public class ASTGentor/*@bgen(jjtree)*/implements ASTGentorTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTASTGentorState jjtree = new JJTASTGentorState();

/*@egen*/

  public SimpleNode parseOneUnit() throws Exception {
    return this.parseClazz();
  }

}

PARSER_END(ASTGentor)

SKIP :
{
  < " " >
  | < "\t" >
  | < "\n" >
  | < "\r" >
  | < "//" (~["\n"])* "\n" >
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}


/**********************************************
 * THE Jack TOKEN SPECIFICATION STARTS HERE *
 **********************************************/

TOKEN :
{
  < CLASS: "class" >
  | < CONSTRUCTOR: "constructor" >
  | < FUNCTION: "function" >
  | < METHOD: "method" >
  | < FIELD: "field" >
  | < STATIK: "static" >
  | < VAR: "var" >
  | < INT: "int" >
  | < CHAR: "char" >
  | < BOOLEAN: "boolean" >
  | < VOID: "void" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < NULL: "null" >
  | < THIS: "this" >
  | < LET: "let" >
  | < DO: "do" >
  | < IF: "if" >
  | < ELSE: "else" >
  | < WHILE: "while" >
  | < RETURN: "return" >
  | < LCURLY: "{" >
  | < RCURLY: "}" >
  | < LPAREN: "(" >
  | < RPAREN: ")" >
  | < LBRAC: "[" >
  | < RBRAC: "]" >
  | < DOT: "." >
  | < COMMA: "," >
  | < SEMICOLON: ";" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < STAR: "*" >
  | < SLASH: "/" >
  | < AND: "&" >
  | < BAR: "|" >
  | < LT: "<" >
  | < GT: ">" >
  | < EQ: "=" >
  | < TILDA: "~" >

}

TOKEN :
{
  < QSTRING: "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" >
  |
  < NUMBER: "0" | ["1" - "9"] (["0" - "9"])* >
}

TOKEN :
{
  < IDENTIFIER: <ALPHA> (<ALPHA>|<DIGIT>)* >
  |
  < #ALPHA: "_" | ["a"-"z", "A"-"Z"]>
  |
  < #DIGIT: ["0"-"9"]>
}

TOKEN :
{
  < SCOPEDINVOKER: <IDENTIFIER> <DOT> <IDENTIFIER> >
}

/************************************************
 * THE Jack GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
//kenl
ClassDec parseClazz()           :
{/*@bgen(jjtree) ClassDec */
  ClassDec jjtn000 = new ClassDec(JJTCLASSDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassDec */
  try {
/*@egen*/
  <CLASS>/*@bgen(jjtree) Keyword */
          {
            Keyword jjtn001 = new Keyword(JJTKEYWORD);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
          }
/*@egen*/ {jjtn001.value=token.image;}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/         
  className()
  <LCURLY>/*@bgen(jjtree) Symbol */
           {
             Symbol jjtn002 = new Symbol(JJTSYMBOL);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn002, true);
             jjtc002 = false;
           }
/*@egen*/ {jjtn002.value=token.image;}/*@bgen(jjtree)*/
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
             }
           }
/*@egen*/        
  {String dummy="hack to bypass jjtree error";}
  (classVarDec())*
  (subroutineDec())*
  <RCURLY>/*@bgen(jjtree) Symbol */
           {
             Symbol jjtn003 = new Symbol(JJTSYMBOL);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn003, true);
             jjtc003 = false;
           }
/*@egen*/ {jjtn003.value=token.image;}/*@bgen(jjtree)*/
           } finally {
             if (jjtc003) {
               jjtree.closeNodeScope(jjtn003, true);
             }
           }
/*@egen*/        /*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//////////////////////////////////////////////////////////////////////////////
//
void classVarDec()              :
{/*@bgen(jjtree) ClassVarDec */
  ClassVarDec jjtn000 = new ClassVarDec(JJTCLASSVARDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassVarDec */
  try {
/*@egen*/
  [<STATIK> | <FIELD>]
  type()
  varName()
  (/*@bgen(jjtree) Symbol */
   {
     Symbol jjtn001 = new Symbol(JJTSYMBOL);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/<COMMA>/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/         varName())*/*@bgen(jjtree) Symbol */
                               {
                                 Symbol jjtn002 = new Symbol(JJTSYMBOL);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
                               }
                               try {
/*@egen*/ <SEMICOLON>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002, true);
                                 }
                               }
/*@egen*/        /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void type() :
{}
{
  <INT>/*@bgen(jjtree) Keyword */
         {
           Keyword jjtn001 = new Keyword(JJTKEYWORD);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*//*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn001, true);
           jjtc001 = false;
         }
/*@egen*/  {jjtn001.value=token.image;}/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
         }
/*@egen*/          |
  <CHAR>/*@bgen(jjtree) Keyword */
          {
            Keyword jjtn002 = new Keyword(JJTKEYWORD);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;
          }
/*@egen*/  {jjtn002.value=token.image;}/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/          |
  <BOOLEAN>/*@bgen(jjtree) Keyword */
             {
               Keyword jjtn003 = new Keyword(JJTKEYWORD);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn003, true);
               jjtc003 = false;
             }
/*@egen*/  {jjtn003.value=token.image;}/*@bgen(jjtree)*/
             } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003, true);
               }
             }
/*@egen*/          | className()
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void subroutineDec()                :
{/*@bgen(jjtree) SubroutineDec */
  SubroutineDec jjtn000 = new SubroutineDec(JJTSUBROUTINEDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SubroutineDec */
  try {
/*@egen*/
  [<CONSTRUCTOR> | <FUNCTION> | <METHOD>]
  [<VOID> | type()]
  subroutineName()/*@bgen(jjtree) Symbol */
  {
    Symbol jjtn001 = new Symbol(JJTSYMBOL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  <LPAREN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/        
  parameterList()/*@bgen(jjtree) Symbol */
  {
    Symbol jjtn002 = new Symbol(JJTSYMBOL);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  <RPAREN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/        
  subroutineBody()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void parameterList()                :
{/*@bgen(jjtree) ParameterList */
  ParameterList jjtn000 = new ParameterList(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParameterList */
  try {
/*@egen*/
  ((type() varName())
   (/*@bgen(jjtree) Symbol */
    {
      Symbol jjtn001 = new Symbol(JJTSYMBOL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/<COMMA>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/         type() varName())*)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void subroutineBody()                 :
{/*@bgen(jjtree) SubroutineBody */
  SubroutineBody jjtn000 = new SubroutineBody(JJTSUBROUTINEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SubroutineBody */
  try {
/*@egen*//*@bgen(jjtree) Symbol */
  {
    Symbol jjtn001 = new Symbol(JJTSYMBOL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  <LCURLY>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/        
  {String dummy="hack to bypass jjtree error";}
  (varDec())* statements()/*@bgen(jjtree) Symbol */
                           {
                             Symbol jjtn002 = new Symbol(JJTSYMBOL);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                           }
                           try {
/*@egen*/ <RCURLY>/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                             }
                           }
/*@egen*/        /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void varDec()         :
{/*@bgen(jjtree) VarDec */
  VarDec jjtn000 = new VarDec(JJTVARDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDec */
  try {
/*@egen*//*@bgen(jjtree) Keyword */
  {
    Keyword jjtn001 = new Keyword(JJTKEYWORD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  <VAR>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/          type() varName()
  (/*@bgen(jjtree) Symbol */
   {
     Symbol jjtn002 = new Symbol(JJTSYMBOL);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
   }
   try {
/*@egen*/<COMMA>/*@bgen(jjtree)*/
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
   }
/*@egen*/         varName())*/*@bgen(jjtree) Symbol */
                               {
                                 Symbol jjtn003 = new Symbol(JJTSYMBOL);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
                               }
                               try {
/*@egen*/ <SEMICOLON>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003, true);
                                 }
                               }
/*@egen*/        /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void statements()             :
{/*@bgen(jjtree) Statements */
  Statements jjtn000 = new Statements(JJTSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statements */
  try {
/*@egen*/
  (statement())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void statement() :
{}
{
  letStatement()  |
  ifStatement()  |
  whileStatement()  |
  doStatement()  |
  returnStatement()
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void letStatement()               :
{/*@bgen(jjtree) LetStatement */
  LetStatement jjtn000 = new LetStatement(JJTLETSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LetStatement */
  try {
/*@egen*//*@bgen(jjtree) Keyword */
  {
    Keyword jjtn001 = new Keyword(JJTKEYWORD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  <LET>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/          varName() (/*@bgen(jjtree) Symbol */
                            {
                              Symbol jjtn002 = new Symbol(JJTSYMBOL);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                            }
                            try {
/*@egen*/<LBRAC>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                              }
                            }
/*@egen*/         expr()/*@bgen(jjtree) Symbol */
                                                   {
                                                     Symbol jjtn003 = new Symbol(JJTSYMBOL);
                                                     boolean jjtc003 = true;
                                                     jjtree.openNodeScope(jjtn003);
                                                   }
                                                   try {
/*@egen*/ <RBRAC>/*@bgen(jjtree)*/
                                                   } finally {
                                                     if (jjtc003) {
                                                       jjtree.closeNodeScope(jjtn003, true);
                                                     }
                                                   }
/*@egen*/        )?
  {String dummy="hack to bypass jjtree error";}/*@bgen(jjtree) Symbol */
  {
    Symbol jjtn004 = new Symbol(JJTSYMBOL);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/
  <EQ>/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/         expr()/*@bgen(jjtree) Symbol */
                      {
                        Symbol jjtn005 = new Symbol(JJTSYMBOL);
                        boolean jjtc005 = true;
                        jjtree.openNodeScope(jjtn005);
                      }
                      try {
/*@egen*/ <SEMICOLON>/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc005) {
                          jjtree.closeNodeScope(jjtn005, true);
                        }
                      }
/*@egen*/        /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void ifStatement()              :
{/*@bgen(jjtree) IfStatement */
  IfStatement jjtn000 = new IfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
  try {
/*@egen*//*@bgen(jjtree) Keyword */
  {
    Keyword jjtn001 = new Keyword(JJTKEYWORD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  <IF>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         /*@bgen(jjtree) Symbol */
                {
                  Symbol jjtn002 = new Symbol(JJTSYMBOL);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ <LPAREN>/*@bgen(jjtree)*/
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/         expr()/*@bgen(jjtree) Symbol */
                                        {
                                          Symbol jjtn003 = new Symbol(JJTSYMBOL);
                                          boolean jjtc003 = true;
                                          jjtree.openNodeScope(jjtn003);
                                        }
                                        try {
/*@egen*/ <RPAREN>/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc003) {
                                            jjtree.closeNodeScope(jjtn003, true);
                                          }
                                        }
/*@egen*/        /*@bgen(jjtree) Symbol */
  {
    Symbol jjtn004 = new Symbol(JJTSYMBOL);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/
  <LCURLY>/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/         statements()/*@bgen(jjtree) Symbol */
                                {
                                  Symbol jjtn005 = new Symbol(JJTSYMBOL);
                                  boolean jjtc005 = true;
                                  jjtree.openNodeScope(jjtn005);
                                }
                                try {
/*@egen*/ <RCURLY>/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc005) {
                                    jjtree.closeNodeScope(jjtn005, true);
                                  }
                                }
/*@egen*/        
  {String dummy="hack to bypass jjtree error";}
  (/*@bgen(jjtree) Keyword */
   {
     Keyword jjtn006 = new Keyword(JJTKEYWORD);
     boolean jjtc006 = true;
     jjtree.openNodeScope(jjtn006);
   }
   try {
/*@egen*/<ELSE>/*@bgen(jjtree)*/
   } finally {
     if (jjtc006) {
       jjtree.closeNodeScope(jjtn006, true);
     }
   }
/*@egen*/         /*@bgen(jjtree) Symbol */
                   {
                     Symbol jjtn007 = new Symbol(JJTSYMBOL);
                     boolean jjtc007 = true;
                     jjtree.openNodeScope(jjtn007);
                   }
                   try {
/*@egen*/ <LCURLY>/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc007) {
                       jjtree.closeNodeScope(jjtn007, true);
                     }
                   }
/*@egen*/         statements()/*@bgen(jjtree) Symbol */
                                                 {
                                                   Symbol jjtn008 = new Symbol(JJTSYMBOL);
                                                   boolean jjtc008 = true;
                                                   jjtree.openNodeScope(jjtn008);
                                                 }
                                                 try {
/*@egen*/ <RCURLY>/*@bgen(jjtree)*/
                                                 } finally {
                                                   if (jjtc008) {
                                                     jjtree.closeNodeScope(jjtn008, true);
                                                   }
                                                 }
/*@egen*/        )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void whileStatement()                 :
{/*@bgen(jjtree) WhileStatement */
  WhileStatement jjtn000 = new WhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStatement */
  try {
/*@egen*//*@bgen(jjtree) Keyword */
  {
    Keyword jjtn001 = new Keyword(JJTKEYWORD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  <WHILE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         /*@bgen(jjtree) Symbol */
                   {
                     Symbol jjtn002 = new Symbol(JJTSYMBOL);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                   }
                   try {
/*@egen*/ <LPAREN>/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                     }
                   }
/*@egen*/         expr()/*@bgen(jjtree) Symbol */
                                           {
                                             Symbol jjtn003 = new Symbol(JJTSYMBOL);
                                             boolean jjtc003 = true;
                                             jjtree.openNodeScope(jjtn003);
                                           }
                                           try {
/*@egen*/ <RPAREN>/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc003) {
                                               jjtree.closeNodeScope(jjtn003, true);
                                             }
                                           }
/*@egen*/        /*@bgen(jjtree) Symbol */
  {
    Symbol jjtn004 = new Symbol(JJTSYMBOL);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/
  <LCURLY>/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/         statements()/*@bgen(jjtree) Symbol */
                                {
                                  Symbol jjtn005 = new Symbol(JJTSYMBOL);
                                  boolean jjtc005 = true;
                                  jjtree.openNodeScope(jjtn005);
                                }
                                try {
/*@egen*/ <RCURLY>/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc005) {
                                    jjtree.closeNodeScope(jjtn005, true);
                                  }
                                }
/*@egen*/        /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void doStatement()              :
{/*@bgen(jjtree) DoStatement */
  DoStatement jjtn000 = new DoStatement(JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DoStatement */
  try {
/*@egen*//*@bgen(jjtree) Keyword */
  {
    Keyword jjtn001 = new Keyword(JJTKEYWORD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  <DO>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/          subroutineCall()/*@bgen(jjtree) Symbol */
                                 {
                                   Symbol jjtn002 = new Symbol(JJTSYMBOL);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
                                 }
                                 try {
/*@egen*/ <SEMICOLON>/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002, true);
                                   }
                                 }
/*@egen*/        /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void returnStatement()                  :
{/*@bgen(jjtree) ReturnStatement */
  ReturnStatement jjtn000 = new ReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStatement */
  try {
/*@egen*//*@bgen(jjtree) Keyword */
  {
    Keyword jjtn001 = new Keyword(JJTKEYWORD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  <RETURN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         /*@bgen(jjtree) Symbol */
                    {
                      Symbol jjtn002 = new Symbol(JJTSYMBOL);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
                    }
                    try {
/*@egen*/ <SEMICOLON>/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
                    }
/*@egen*/         |/*@bgen(jjtree) Keyword */
  {
    Keyword jjtn003 = new Keyword(JJTKEYWORD);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/
  <RETURN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/          expr()/*@bgen(jjtree) Symbol */
                           {
                             Symbol jjtn004 = new Symbol(JJTSYMBOL);
                             boolean jjtc004 = true;
                             jjtree.openNodeScope(jjtn004);
                           }
                           try {
/*@egen*/ <SEMICOLON>/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc004) {
                               jjtree.closeNodeScope(jjtn004, true);
                             }
                           }
/*@egen*/        /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void expr()             :
{/*@bgen(jjtree) Expression */
  Expression jjtn000 = new Expression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  term() (op() term())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void term()       :
{/*@bgen(jjtree) Term */
  Term jjtn000 = new Term(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Term */
  try {
/*@egen*//*@bgen(jjtree) Symbol */
  {
    Symbol jjtn001 = new Symbol(JJTSYMBOL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  <LPAREN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         expr()/*@bgen(jjtree) Symbol */
                          {
                            Symbol jjtn002 = new Symbol(JJTSYMBOL);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
                          }
                          try {
/*@egen*/ <RPAREN>/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                            }
                          }
/*@egen*/          |
  unaryOp() term() |
  integerConstant() |
  stringConstant()  |
  keywordConstant()  |
  subroutineCall() |
  varName()/*@bgen(jjtree) Symbol */
            {
              Symbol jjtn003 = new Symbol(JJTSYMBOL);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
            }
            try {
/*@egen*/ <LBRAC>/*@bgen(jjtree)*/
            } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003, true);
              }
            }
/*@egen*/         expr()/*@bgen(jjtree) Symbol */
                                   {
                                     Symbol jjtn004 = new Symbol(JJTSYMBOL);
                                     boolean jjtc004 = true;
                                     jjtree.openNodeScope(jjtn004);
                                   }
                                   try {
/*@egen*/ <RBRAC>/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc004) {
                                       jjtree.closeNodeScope(jjtn004, true);
                                     }
                                   }
/*@egen*/         | varName()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void subroutineCall() :
{}
{
  subroutineName()/*@bgen(jjtree) Symbol */
                   {
                     Symbol jjtn001 = new Symbol(JJTSYMBOL);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ <LPAREN>/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
                   }
/*@egen*/         exprList()/*@bgen(jjtree) Symbol */
                                               {
                                                 Symbol jjtn002 = new Symbol(JJTSYMBOL);
                                                 boolean jjtc002 = true;
                                                 jjtree.openNodeScope(jjtn002);
                                               }
                                               try {
/*@egen*/ <RPAREN>/*@bgen(jjtree)*/
                                               } finally {
                                                 if (jjtc002) {
                                                   jjtree.closeNodeScope(jjtn002, true);
                                                 }
                                               }
/*@egen*/         |
  scopedCall()/*@bgen(jjtree) Symbol */
               {
                 Symbol jjtn003 = new Symbol(JJTSYMBOL);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
               }
               try {
/*@egen*/ <LPAREN>/*@bgen(jjtree)*/
               } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003, true);
                 }
               }
/*@egen*/         exprList()/*@bgen(jjtree) Symbol */
                                           {
                                             Symbol jjtn004 = new Symbol(JJTSYMBOL);
                                             boolean jjtc004 = true;
                                             jjtree.openNodeScope(jjtn004);
                                           }
                                           try {
/*@egen*/ <RPAREN>/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc004) {
                                               jjtree.closeNodeScope(jjtn004, true);
                                             }
                                           }
/*@egen*/        
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void exprList()                 :
{/*@bgen(jjtree) ExpressionList */
  ExpressionList jjtn000 = new ExpressionList(JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressionList */
  try {
/*@egen*/
  (expr() (/*@bgen(jjtree) Symbol */
           {
             Symbol jjtn001 = new Symbol(JJTSYMBOL);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/<COMMA>/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/         expr())*)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void scopedCall()             :
{/*@bgen(jjtree) ScopedCall */
  ScopedCall jjtn000 = new ScopedCall(JJTSCOPEDCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ScopedCall */
  try {
/*@egen*/
  <SCOPEDINVOKER>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {
    //System.out.println("scopedinvoker= " + t.image);
    //return t.image.split("\\.");
    jjtn000.value=token.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void op()          :
{/*@bgen(jjtree) Keyword */
  Keyword jjtn000 = new Keyword(JJTKEYWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Keyword */
  try {
/*@egen*/
  <PLUS>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {jjtn000.value=token.image;} |
  <MINUS>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.value=token.image;} |
  <STAR>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {jjtn000.value=token.image;} |
  <SLASH>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.value=token.image;} |
  <AND>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ {jjtn000.value=token.image;} |
  <BAR>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ {jjtn000.value=token.image;} |
  <LT>/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/ {jjtn000.value=token.image;} |
  <GT>/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/ {jjtn000.value=token.image;} |
  <EQ>/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/ {jjtn000.value=token.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void unaryOp()          :
{/*@bgen(jjtree) Keyword */
  Keyword jjtn000 = new Keyword(JJTKEYWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Keyword */
  try {
/*@egen*/
  <MINUS>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.value=token.image;} |
  <TILDA>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.value=token.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void integerConstant()                  :
{/*@bgen(jjtree) IntegerConstant */
  IntegerConstant jjtn000 = new IntegerConstant(JJTINTEGERCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IntegerConstant */
  try {
/*@egen*/ <NUMBER>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value=token.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void stringConstant()                 :
{/*@bgen(jjtree) StringConstant */
 StringConstant jjtn000 = new StringConstant(JJTSTRINGCONSTANT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) StringConstant */
  try {
/*@egen*/
  <QSTRING>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {
    s=token.image;
    jjtn000.value=s.substring(1,s.length()-1);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void keywordConstant()          :
{/*@bgen(jjtree) Keyword */
  Keyword jjtn000 = new Keyword(JJTKEYWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Keyword */
  try {
/*@egen*/
  <TRUE>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {jjtn000.value=token.image;} |
  <FALSE>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.value=token.image;} |
  <NULL>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {jjtn000.value=token.image;} |
  <THIS>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {jjtn000.value=token.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void subroutineName()             :
{/*@bgen(jjtree) Identifier */
  Identifier jjtn000 = new Identifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  <IDENTIFIER>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value=token.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void className()             :
{/*@bgen(jjtree) Identifier */
  Identifier jjtn000 = new Identifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  <IDENTIFIER>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value=token.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
void varName()             :
{/*@bgen(jjtree) Identifier */
  Identifier jjtn000 = new Identifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  <IDENTIFIER>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value=token.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}