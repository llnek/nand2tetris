/* ASTGentor.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ASTGentor.java */
package czlab.tecs.ast;

public class ASTGentor/*@bgen(jjtree)*/implements ASTGentorTreeConstants, ASTGentorConstants {/*@bgen(jjtree)*/
  protected JJTASTGentorState jjtree = new JJTASTGentorState();
  public SimpleNode parseOneUnit() throws Exception {
    return this.parseClazz();
  }

/************************************************
 * THE Jack GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
  final public ClassDec parseClazz() throws ParseException {/*@bgen(jjtree) ClassDec */
  ClassDec jjtn000 = new ClassDec(JJTCLASSDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
Keyword jjtn001 = new Keyword(JJTKEYWORD);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
jjtn001.value=token.image;
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
      className();
      jj_consume_token(LCURLY);
Symbol jjtn002 = new Symbol(JJTSYMBOL);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
             jjtc002 = false;
jjtn002.value=token.image;
      } finally {
if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
             }
      }
String dummy="hack to bypass jjtree error";
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        classVarDec();
      }
      label_2:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_2;
        }
        subroutineDec();
      }
      jj_consume_token(RCURLY);
Symbol jjtn003 = new Symbol(JJTSYMBOL);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003, true);
             jjtc003 = false;
jjtn003.value=token.image;
      } finally {
if (jjtc003) {
               jjtree.closeNodeScope(jjtn003, true);
             }
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////////
//
  final public void classVarDec() throws ParseException {/*@bgen(jjtree) ClassVarDec */
  ClassVarDec jjtn000 = new ClassVarDec(JJTCLASSVARDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_5(2)) {
        if (jj_2_3(2)) {
          jj_consume_token(STATIK);
Keyword jjtn001 = new Keyword(JJTKEYWORD);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
          try {
jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
jjtn001.value=token.image;
          } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
          }
        } else if (jj_2_4(2)) {
          jj_consume_token(FIELD);
Keyword jjtn002 = new Keyword(JJTKEYWORD);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
          try {
jjtree.closeNodeScope(jjtn002, true);
             jjtc002 = false;
jjtn002.value=token.image;
          } finally {
if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
             }
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      type();
      varName();
      label_3:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(COMMA);
Symbol jjtn003 = new Symbol(JJTSYMBOL);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
        try {
jjtree.closeNodeScope(jjtn003, true);
             jjtc003 = false;
jjtn003.value=token.image;
        } finally {
if (jjtc003) {
               jjtree.closeNodeScope(jjtn003, true);
             }
        }
        varName();
      }
      jj_consume_token(SEMICOLON);
Symbol jjtn004 = new Symbol(JJTSYMBOL);
                                                                          boolean jjtc004 = true;
                                                                          jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004, true);
                                                                          jjtc004 = false;
jjtn004.value=token.image;
      } finally {
if (jjtc004) {
                                                                            jjtree.closeNodeScope(jjtn004, true);
                                                                          }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void type() throws ParseException {/*@bgen(jjtree) Type */
  Type jjtn000 = new Type(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_7(2)) {
        jj_consume_token(INT);
jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_8(2)) {
        jj_consume_token(CHAR);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_9(2)) {
        jj_consume_token(BOOLEAN);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_10(2)) {
        jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.value=token.image;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void subroutineDec() throws ParseException {/*@bgen(jjtree) SubroutineDec */
  SubroutineDec jjtn000 = new SubroutineDec(JJTSUBROUTINEDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_14(2)) {
        if (jj_2_11(2)) {
          jj_consume_token(CONSTRUCTOR);
Keyword jjtn001 = new Keyword(JJTKEYWORD);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
          try {
jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
jjtn001.value=token.image;
          } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
          }
        } else if (jj_2_12(2)) {
          jj_consume_token(FUNCTION);
Keyword jjtn002 = new Keyword(JJTKEYWORD);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
          try {
jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
jjtn002.value=token.image;
          } finally {
if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
          }
        } else if (jj_2_13(2)) {
          jj_consume_token(METHOD);
Keyword jjtn003 = new Keyword(JJTKEYWORD);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
          try {
jjtree.closeNodeScope(jjtn003, true);
              jjtc003 = false;
jjtn003.value=token.image;
          } finally {
if (jjtc003) {
                jjtree.closeNodeScope(jjtn003, true);
              }
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      if (jj_2_17(2)) {
        if (jj_2_15(2)) {
          jj_consume_token(VOID);
Keyword jjtn004 = new Keyword(JJTKEYWORD);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
          try {
jjtree.closeNodeScope(jjtn004, true);
            jjtc004 = false;
jjtn004.value=token.image;
          } finally {
if (jjtc004) {
              jjtree.closeNodeScope(jjtn004, true);
            }
          }
        } else if (jj_2_16(2)) {
          type();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      subroutineName();
      jj_consume_token(LPAREN);
Symbol jjtn005 = new Symbol(JJTSYMBOL);
             boolean jjtc005 = true;
             jjtree.openNodeScope(jjtn005);
      try {
jjtree.closeNodeScope(jjtn005, true);
             jjtc005 = false;
jjtn005.value=token.image;
      } finally {
if (jjtc005) {
               jjtree.closeNodeScope(jjtn005, true);
             }
      }
      parameterList();
      jj_consume_token(RPAREN);
Symbol jjtn006 = new Symbol(JJTSYMBOL);
             boolean jjtc006 = true;
             jjtree.openNodeScope(jjtn006);
      try {
jjtree.closeNodeScope(jjtn006, true);
             jjtc006 = false;
jjtn006.value=token.image;
      } finally {
if (jjtc006) {
               jjtree.closeNodeScope(jjtn006, true);
             }
      }
      subroutineBody();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void parameterList() throws ParseException {/*@bgen(jjtree) ParameterList */
  ParameterList jjtn000 = new ParameterList(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_19(2)) {
        type();
        varName();
        label_4:
        while (true) {
          if (jj_2_18(2)) {
            ;
          } else {
            break label_4;
          }
          jj_consume_token(COMMA);
Symbol jjtn001 = new Symbol(JJTSYMBOL);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
          try {
jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
jjtn001.value=token.image;
          } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
          }
          type();
          varName();
        }
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void subroutineBody() throws ParseException {/*@bgen(jjtree) SubroutineBody */
  SubroutineBody jjtn000 = new SubroutineBody(JJTSUBROUTINEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LCURLY);
Symbol jjtn001 = new Symbol(JJTSYMBOL);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
jjtn001.value=token.image;
      } finally {
if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
      }
String dummy="hack to bypass jjtree error";
      label_5:
      while (true) {
        if (jj_2_20(2)) {
          ;
        } else {
          break label_5;
        }
        varDec();
      }
      statements();
      jj_consume_token(RCURLY);
Symbol jjtn002 = new Symbol(JJTSYMBOL);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                                      jjtc002 = false;
jjtn002.value=token.image;
      } finally {
if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002, true);
                                      }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void varDec() throws ParseException {/*@bgen(jjtree) VarDec */
  VarDec jjtn000 = new VarDec(JJTVARDEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VAR);
Keyword jjtn001 = new Keyword(JJTKEYWORD);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
jjtn001.value=token.image;
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      type();
      varName();
      label_6:
      while (true) {
        if (jj_2_21(2)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(COMMA);
Symbol jjtn002 = new Symbol(JJTSYMBOL);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002, true);
             jjtc002 = false;
jjtn002.value=token.image;
        } finally {
if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
             }
        }
        varName();
      }
      jj_consume_token(SEMICOLON);
Symbol jjtn003 = new Symbol(JJTSYMBOL);
                                                                          boolean jjtc003 = true;
                                                                          jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003, true);
                                                                          jjtc003 = false;
jjtn003.value=token.image;
      } finally {
if (jjtc003) {
                                                                            jjtree.closeNodeScope(jjtn003, true);
                                                                          }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void statements() throws ParseException {/*@bgen(jjtree) Statements */
  Statements jjtn000 = new Statements(JJTSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_7:
      while (true) {
        if (jj_2_22(2)) {
          ;
        } else {
          break label_7;
        }
        statement();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void statement() throws ParseException {
    if (jj_2_23(2)) {
      letStatement();
    } else if (jj_2_24(2)) {
      ifStatement();
    } else if (jj_2_25(2)) {
      whileStatement();
    } else if (jj_2_26(2)) {
      doStatement();
    } else if (jj_2_27(2)) {
      returnStatement();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void letStatement() throws ParseException {/*@bgen(jjtree) LetStatement */
  LetStatement jjtn000 = new LetStatement(JJTLETSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LET);
Keyword jjtn001 = new Keyword(JJTKEYWORD);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
jjtn001.value=token.image;
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      varName();
      if (jj_2_28(2)) {
        jj_consume_token(LBRAC);
Symbol jjtn002 = new Symbol(JJTSYMBOL);
                                                                   boolean jjtc002 = true;
                                                                   jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002, true);
                                                                   jjtc002 = false;
jjtn002.value=token.image;
        } finally {
if (jjtc002) {
                                                                     jjtree.closeNodeScope(jjtn002, true);
                                                                   }
        }
        expr();
        jj_consume_token(RBRAC);
Symbol jjtn003 = new Symbol(JJTSYMBOL);
                                                                                                                       boolean jjtc003 = true;
                                                                                                                       jjtree.openNodeScope(jjtn003);
        try {
jjtree.closeNodeScope(jjtn003, true);
                                                                                                                       jjtc003 = false;
jjtn003.value=token.image;
        } finally {
if (jjtc003) {
                                                                                                                         jjtree.closeNodeScope(jjtn003, true);
                                                                                                                       }
        }
      } else {
        ;
      }
String dummy="hack to bypass jjtree error";
      jj_consume_token(EQ);
Symbol jjtn004 = new Symbol(JJTSYMBOL);
         boolean jjtc004 = true;
         jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004, true);
         jjtc004 = false;
jjtn004.value=token.image;
      } finally {
if (jjtc004) {
           jjtree.closeNodeScope(jjtn004, true);
         }
      }
      expr();
      jj_consume_token(SEMICOLON);
Symbol jjtn005 = new Symbol(JJTSYMBOL);
                                                                 boolean jjtc005 = true;
                                                                 jjtree.openNodeScope(jjtn005);
      try {
jjtree.closeNodeScope(jjtn005, true);
                                                                 jjtc005 = false;
jjtn005.value=token.image;
      } finally {
if (jjtc005) {
                                                                   jjtree.closeNodeScope(jjtn005, true);
                                                                 }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void ifStatement() throws ParseException {/*@bgen(jjtree) IfStatement */
  IfStatement jjtn000 = new IfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
Keyword jjtn001 = new Keyword(JJTKEYWORD);
         boolean jjtc001 = true;
         jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
         jjtc001 = false;
jjtn001.value=token.image;
      } finally {
if (jjtc001) {
           jjtree.closeNodeScope(jjtn001, true);
         }
      }
      jj_consume_token(LPAREN);
Symbol jjtn002 = new Symbol(JJTSYMBOL);
                                                        boolean jjtc002 = true;
                                                        jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                                                        jjtc002 = false;
jjtn002.value=token.image;
      } finally {
if (jjtc002) {
                                                          jjtree.closeNodeScope(jjtn002, true);
                                                        }
      }
      expr();
      jj_consume_token(RPAREN);
Symbol jjtn003 = new Symbol(JJTSYMBOL);
                                                                                                             boolean jjtc003 = true;
                                                                                                             jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003, true);
                                                                                                             jjtc003 = false;
jjtn003.value=token.image;
      } finally {
if (jjtc003) {
                                                                                                               jjtree.closeNodeScope(jjtn003, true);
                                                                                                             }
      }
      jj_consume_token(LCURLY);
Symbol jjtn004 = new Symbol(JJTSYMBOL);
             boolean jjtc004 = true;
             jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004, true);
             jjtc004 = false;
jjtn004.value=token.image;
      } finally {
if (jjtc004) {
               jjtree.closeNodeScope(jjtn004, true);
             }
      }
      statements();
      jj_consume_token(RCURLY);
Symbol jjtn005 = new Symbol(JJTSYMBOL);
                                                                        boolean jjtc005 = true;
                                                                        jjtree.openNodeScope(jjtn005);
      try {
jjtree.closeNodeScope(jjtn005, true);
                                                                        jjtc005 = false;

      } finally {
if (jjtc005) {
                                                                          jjtree.closeNodeScope(jjtn005, true);
                                                                        }
      }
String dummy="hack to bypass jjtree error";
      if (jj_2_29(2)) {
        jj_consume_token(ELSE);
Keyword jjtn006 = new Keyword(JJTKEYWORD);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
        try {
jjtree.closeNodeScope(jjtn006, true);
            jjtc006 = false;
jjtn006.value=token.image;
        } finally {
if (jjtc006) {
              jjtree.closeNodeScope(jjtn006, true);
            }
        }
        jj_consume_token(LCURLY);
Symbol jjtn007 = new Symbol(JJTSYMBOL);
                                                           boolean jjtc007 = true;
                                                           jjtree.openNodeScope(jjtn007);
        try {
jjtree.closeNodeScope(jjtn007, true);
                                                           jjtc007 = false;
jjtn007.value=token.image;
        } finally {
if (jjtc007) {
                                                             jjtree.closeNodeScope(jjtn007, true);
                                                           }
        }
        statements();
        jj_consume_token(RCURLY);
Symbol jjtn008 = new Symbol(JJTSYMBOL);
                                                                                                                      boolean jjtc008 = true;
                                                                                                                      jjtree.openNodeScope(jjtn008);
        try {
jjtree.closeNodeScope(jjtn008, true);
                                                                                                                      jjtc008 = false;
jjtn008.value=token.image;
        } finally {
if (jjtc008) {
                                                                                                                        jjtree.closeNodeScope(jjtn008, true);
                                                                                                                      }
        }
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void whileStatement() throws ParseException {/*@bgen(jjtree) WhileStatement */
  WhileStatement jjtn000 = new WhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
Keyword jjtn001 = new Keyword(JJTKEYWORD);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
jjtn001.value=token.image;
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
      jj_consume_token(LPAREN);
Symbol jjtn002 = new Symbol(JJTSYMBOL);
                                                           boolean jjtc002 = true;
                                                           jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                                                           jjtc002 = false;
jjtn002.value=token.image;
      } finally {
if (jjtc002) {
                                                             jjtree.closeNodeScope(jjtn002, true);
                                                           }
      }
      expr();
      jj_consume_token(RPAREN);
Symbol jjtn003 = new Symbol(JJTSYMBOL);
                                                                                                                boolean jjtc003 = true;
                                                                                                                jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003, true);
                                                                                                                jjtc003 = false;
jjtn003.value=token.image;
      } finally {
if (jjtc003) {
                                                                                                                  jjtree.closeNodeScope(jjtn003, true);
                                                                                                                }
      }
      jj_consume_token(LCURLY);
Symbol jjtn004 = new Symbol(JJTSYMBOL);
             boolean jjtc004 = true;
             jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004, true);
             jjtc004 = false;
jjtn004.value=token.image;
      } finally {
if (jjtc004) {
               jjtree.closeNodeScope(jjtn004, true);
             }
      }
      statements();
      jj_consume_token(RCURLY);
Symbol jjtn005 = new Symbol(JJTSYMBOL);
                                                                        boolean jjtc005 = true;
                                                                        jjtree.openNodeScope(jjtn005);
      try {
jjtree.closeNodeScope(jjtn005, true);
                                                                        jjtc005 = false;
jjtn005.value=token.image;
      } finally {
if (jjtc005) {
                                                                          jjtree.closeNodeScope(jjtn005, true);
                                                                        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void doStatement() throws ParseException {/*@bgen(jjtree) DoStatement */
  DoStatement jjtn000 = new DoStatement(JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
Keyword jjtn001 = new Keyword(JJTKEYWORD);
         boolean jjtc001 = true;
         jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
         jjtc001 = false;
jjtn001.value=token.image;
      } finally {
if (jjtc001) {
           jjtree.closeNodeScope(jjtn001, true);
         }
      }
      subroutineCall();
      jj_consume_token(SEMICOLON);
Symbol jjtn002 = new Symbol(JJTSYMBOL);
                                                                            boolean jjtc002 = true;
                                                                            jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                                                                            jjtc002 = false;
jjtn002.value=token.image;
      } finally {
if (jjtc002) {
                                                                              jjtree.closeNodeScope(jjtn002, true);
                                                                            }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void returnStatement() throws ParseException {/*@bgen(jjtree) ReturnStatement */
  ReturnStatement jjtn000 = new ReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_30(2)) {
        jj_consume_token(RETURN);
Keyword jjtn001 = new Keyword(JJTKEYWORD);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
jjtn001.value=token.image;
        } finally {
if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
        }
        jj_consume_token(SEMICOLON);
Symbol jjtn002 = new Symbol(JJTSYMBOL);
                                                               boolean jjtc002 = true;
                                                               jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002, true);
                                                               jjtc002 = false;
jjtn002.value=token.image;
        } finally {
if (jjtc002) {
                                                                 jjtree.closeNodeScope(jjtn002, true);
                                                               }
        }
      } else if (jj_2_31(2)) {
        jj_consume_token(RETURN);
Keyword jjtn003 = new Keyword(JJTKEYWORD);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
        try {
jjtree.closeNodeScope(jjtn003, true);
             jjtc003 = false;
jjtn003.value=token.image;
        } finally {
if (jjtc003) {
               jjtree.closeNodeScope(jjtn003, true);
             }
        }
        expr();
        jj_consume_token(SEMICOLON);
Symbol jjtn004 = new Symbol(JJTSYMBOL);
                                                                      boolean jjtc004 = true;
                                                                      jjtree.openNodeScope(jjtn004);
        try {
jjtree.closeNodeScope(jjtn004, true);
                                                                      jjtc004 = false;
jjtn004.value=token.image;
        } finally {
if (jjtc004) {
                                                                        jjtree.closeNodeScope(jjtn004, true);
                                                                      }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void expr() throws ParseException {/*@bgen(jjtree) Expression */
  Expression jjtn000 = new Expression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      term();
      label_8:
      while (true) {
        if (jj_2_32(2)) {
          ;
        } else {
          break label_8;
        }
        op();
        term();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void term() throws ParseException {/*@bgen(jjtree) Term */
  Term jjtn000 = new Term(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_33(2)) {
        jj_consume_token(LPAREN);
Symbol jjtn001 = new Symbol(JJTSYMBOL);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
jjtn001.value=token.image;
        } finally {
if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
        }
        expr();
        jj_consume_token(RPAREN);
Symbol jjtn002 = new Symbol(JJTSYMBOL);
                                                                  boolean jjtc002 = true;
                                                                  jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002, true);
                                                                  jjtc002 = false;
jjtn002.value=token.image;
        } finally {
if (jjtc002) {
                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                  }
        }
      } else if (jj_2_34(2)) {
        unaryOp();
        term();
      } else if (jj_2_35(2)) {
        integerConstant();
      } else if (jj_2_36(2)) {
        stringConstant();
      } else if (jj_2_37(2)) {
        keywordConstant();
      } else if (jj_2_38(2)) {
        subroutineCall();
      } else if (jj_2_39(2)) {
        varName();
        jj_consume_token(LBRAC);
Symbol jjtn003 = new Symbol(JJTSYMBOL);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
        try {
jjtree.closeNodeScope(jjtn003, true);
                      jjtc003 = false;
jjtn003.value=token.image;
        } finally {
if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, true);
                      }
        }
        expr();
        jj_consume_token(RBRAC);
Symbol jjtn004 = new Symbol(JJTSYMBOL);
                                                                          boolean jjtc004 = true;
                                                                          jjtree.openNodeScope(jjtn004);
        try {
jjtree.closeNodeScope(jjtn004, true);
                                                                          jjtc004 = false;
jjtn004.value=token.image;
        } finally {
if (jjtc004) {
                                                                            jjtree.closeNodeScope(jjtn004, true);
                                                                          }
        }
      } else if (jj_2_40(2)) {
        varName();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void subroutineCall() throws ParseException {/*@bgen(jjtree) SubroutineCall */
  SubroutineCall jjtn000 = new SubroutineCall(JJTSUBROUTINECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_41(2)) {
        subroutineName();
        jj_consume_token(LPAREN);
Symbol jjtn001 = new Symbol(JJTSYMBOL);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001, true);
                              jjtc001 = false;
jjtn001.value=token.image;
        } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
        }
        exprList();
        jj_consume_token(RPAREN);
Symbol jjtn002 = new Symbol(JJTSYMBOL);
                                                                                       boolean jjtc002 = true;
                                                                                       jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002, true);
                                                                                       jjtc002 = false;
jjtn002.value=token.image;
        } finally {
if (jjtc002) {
                                                                                         jjtree.closeNodeScope(jjtn002, true);
                                                                                       }
        }
      } else if (jj_2_42(2)) {
        scopedCall();
        jj_consume_token(LPAREN);
Symbol jjtn003 = new Symbol(JJTSYMBOL);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
        try {
jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
jjtn003.value=token.image;
        } finally {
if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
        }
        exprList();
        jj_consume_token(RPAREN);
Symbol jjtn004 = new Symbol(JJTSYMBOL);
                                                                                   boolean jjtc004 = true;
                                                                                   jjtree.openNodeScope(jjtn004);
        try {
jjtree.closeNodeScope(jjtn004, true);
                                                                                   jjtc004 = false;
jjtn004.value=token.image;
        } finally {
if (jjtc004) {
                                                                                     jjtree.closeNodeScope(jjtn004, true);
                                                                                   }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void exprList() throws ParseException {/*@bgen(jjtree) ExpressionList */
  ExpressionList jjtn000 = new ExpressionList(JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_44(2)) {
        expr();
        label_9:
        while (true) {
          if (jj_2_43(2)) {
            ;
          } else {
            break label_9;
          }
          jj_consume_token(COMMA);
Symbol jjtn001 = new Symbol(JJTSYMBOL);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
          try {
jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
jjtn001.value=token.image;
          } finally {
if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
          }
          expr();
        }
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void scopedCall() throws ParseException {/*@bgen(jjtree) ScopedCall */
  ScopedCall jjtn000 = new ScopedCall(JJTSCOPEDCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SCOPEDINVOKER);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
//System.out.println("scopedinvoker= " + t.image);
    //return t.image.split("\\.");
    jjtn000.value=token.image;
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void op() throws ParseException {/*@bgen(jjtree) Keyword */
  Keyword jjtn000 = new Keyword(JJTKEYWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_45(2)) {
        jj_consume_token(PLUS);
jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_46(2)) {
        jj_consume_token(MINUS);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_47(2)) {
        jj_consume_token(STAR);
jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_48(2)) {
        jj_consume_token(SLASH);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_49(2)) {
        jj_consume_token(AND);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_50(2)) {
        jj_consume_token(BAR);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_51(2)) {
        jj_consume_token(LT);
jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_52(2)) {
        jj_consume_token(GT);
jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_53(2)) {
        jj_consume_token(EQ);
jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
jjtn000.value=token.image;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void unaryOp() throws ParseException {/*@bgen(jjtree) Keyword */
  Keyword jjtn000 = new Keyword(JJTKEYWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_54(2)) {
        jj_consume_token(MINUS);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_55(2)) {
        jj_consume_token(TILDA);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
jjtn000.value=token.image;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void integerConstant() throws ParseException {/*@bgen(jjtree) IntegerConstant */
  IntegerConstant jjtn000 = new IntegerConstant(JJTINTEGERCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NUMBER);
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
jjtn000.value=token.image;
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void stringConstant() throws ParseException {/*@bgen(jjtree) StringConstant */
 StringConstant jjtn000 = new StringConstant(JJTSTRINGCONSTANT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String s;
    try {
      jj_consume_token(QSTRING);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
s=token.image;
    jjtn000.value=s.substring(1,s.length()-1);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void keywordConstant() throws ParseException {/*@bgen(jjtree) Keyword */
  Keyword jjtn000 = new Keyword(JJTKEYWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_56(2)) {
        jj_consume_token(TRUE);
jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_57(2)) {
        jj_consume_token(FALSE);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_58(2)) {
        jj_consume_token(NULL);
jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
jjtn000.value=token.image;
      } else if (jj_2_59(2)) {
        jj_consume_token(THIS);
jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
jjtn000.value=token.image;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void subroutineName() throws ParseException {/*@bgen(jjtree) Identifier */
  Identifier jjtn000 = new Identifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.value=token.image;
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void className() throws ParseException {/*@bgen(jjtree) Identifier */
  Identifier jjtn000 = new Identifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.value=token.image;
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public void varName() throws ParseException {/*@bgen(jjtree) Identifier */
  Identifier jjtn000 = new Identifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.value=token.image;
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_3R_14()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_13()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_58()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_57()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_56()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(METHOD)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(QSTRING)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(CONSTRUCTOR)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_scan_token(TILDA)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) return true;
    }
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(FIELD)) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(STATIK)) return true;
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_scan_token(BAR)) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(SCOPEDINVOKER)) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_3R_30()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_3R_29()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_12()) return true;
    if (jj_scan_token(LBRAC)) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_3R_24()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(LBRAC)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_scan_token(RETURN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(LCURLY)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ASTGentorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[59];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ASTGentor(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ASTGentor(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ASTGentorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ASTGentor(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ASTGentorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ASTGentor(ASTGentorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ASTGentorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 59; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
