/* JackParser.java */
/* Generated By:JavaCC: Do not edit this line. JackParser.java */
package czlab.tecs.p10;

public class JackParser implements JackParserConstants {

  public String compileOneUnit() throws Exception {
    return this.compileClazz();
  }

  private String strit(Object obj) {
    String s;
    if (obj instanceof Token) {
      s=((Token) obj).image;
    } else {
      s= obj.toString();
    }
    return s;
  }

  private String xrefType(Object obj) {
    if (obj instanceof Token) {
      return vtag("keyword", obj);
    } else {
      return vtag("identifier", obj);
    }
  }

  private String stag(Object obj, boolean b) {
    return "<" + strit(obj) + ">" + (b ? "\u005cn" : "");
  }

  private String stag(Object obj) {
    return stag(obj,true);
  }

  private String etag(Object obj, boolean b) {
    return "</" + strit(obj) + ">" + (b ? "\u005cn" : "");
  }

  private String etag(Object obj) {
    return etag(obj,true);
  }

  private String vtag(Object tag, Object obj) {
    String t= strit(tag);
    String s= strit(obj);
    if ("symbol".equals(t)) {
      if (">".equals(s)) {
        s="&gt;";
      } else if ("<".equals(s)) {
        s="&lt;";
      } else if ("&".equals(s)) {
        s="&amp;";
      }
    }
    return stag(t,false) + s + etag(t, true);
  }

/************************************************
 * THE Jack GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
//kenl
  final public String compileClazz() throws ParseException {StringBuilder bf=new StringBuilder();
  String dv, ds;
  Token cz, cn, lc, rc;
    cz = jj_consume_token(CLASS);
    cn = className();
    lc = jj_consume_token(LCURLY);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      dv = classVarDec();
//if (bf.length()> 0) { bf.append("\n"); }
    bf.append(dv);
    }
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      ds = subroutineDec();
//if (bf.length()> 0) { bf.append("\n"); }
    bf.append(ds);
    }
    rc = jj_consume_token(RCURLY);
{if ("" != null) return
    stag("class") +
    vtag("keyword", cz) +
    vtag("identifier", cn) +
    vtag("symbol", lc) +
    bf +
    vtag("symbol", rc) +
    etag("class");}
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////////
//
  final public String classVarDec() throws ParseException {StringBuilder bf=new StringBuilder();
  Object t;
  Token sc, c, v1, vn, q;
    if (jj_2_3(2)) {
      q = jj_consume_token(STATIK);
    } else if (jj_2_4(2)) {
      q = jj_consume_token(FIELD);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = type();
    v1 = varName();
    label_3:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_3;
      }
      c = jj_consume_token(COMMA);
      vn = varName();
bf.
    append(vtag("symbol",c)).
    append(vtag("identifier", vn));
    }
    sc = jj_consume_token(SEMICOLON);
{if ("" != null) return stag("classVarDec") +
    vtag("keyword", q) +
    xrefType(t) +
    vtag("identifier", v1) +
    bf +
    vtag("symbol", sc) +
    etag("classVarDec");}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public Object type() throws ParseException {Token t, z;
    if (jj_2_6(2)) {
      t = jj_consume_token(INT);
{if ("" != null) return t;}
    } else if (jj_2_7(2)) {
      t = jj_consume_token(CHAR);
{if ("" != null) return t;}
    } else if (jj_2_8(2)) {
      t = jj_consume_token(BOOLEAN);
{if ("" != null) return t;}
    } else if (jj_2_9(2)) {
      z = className();
{if ("" != null) return z.image;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String subroutineDec() throws ParseException {StringBuilder bf= new StringBuilder();
  String pml, sby;
  Object rt;
  Token ft, sn, lp, rp;
    if (jj_2_10(2)) {
      ft = jj_consume_token(CONSTRUCTOR);
    } else if (jj_2_11(2)) {
      ft = jj_consume_token(FUNCTION);
    } else if (jj_2_12(2)) {
      ft = jj_consume_token(METHOD);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_13(2)) {
      rt = jj_consume_token(VOID);
    } else if (jj_2_14(2)) {
      rt = type();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    sn = subroutineName();
    lp = jj_consume_token(LPAREN);
    pml = parameterList();
    rp = jj_consume_token(RPAREN);
    sby = subroutineBody();
{if ("" != null) return stag("subroutineDec") +
    vtag("keyword", ft) +
    xrefType(rt) +
    vtag("identifier", sn) +
    vtag("symbol", lp) +
    pml +
    vtag("symbol", rp) +
    sby +
    etag("subroutineDec");}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String parameterList() throws ParseException {StringBuilder bf= new StringBuilder();
  Token vn, c, vn99;
  Object t2, t;
    if (jj_2_16(2)) {
      t = type();
      vn = varName();
bf.append(xrefType(t)).
    append(vtag("identifier",vn));
      label_4:
      while (true) {
        if (jj_2_15(2)) {
          ;
        } else {
          break label_4;
        }
        c = jj_consume_token(COMMA);
        t2 = type();
        vn99 = varName();
bf.append(vtag("symbol", c)).
    append(xrefType(t2)).
    append(vtag("identifier", vn99));
      }
    } else {
      ;
    }
{if ("" != null) return stag("parameterList") + bf +
    etag("parameterList");}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String subroutineBody() throws ParseException {StringBuilder bf= new StringBuilder();
  Token lc, rc;
  String v, ss;
    lc = jj_consume_token(LCURLY);
    label_5:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_5;
      }
      v = varDec();
bf.append(v);
    }
    ss = statements();
    rc = jj_consume_token(RCURLY);
{if ("" != null) return stag("subroutineBody") +
    vtag("symbol", lc) +
    bf + ss +
    vtag("symbol", rc) +
    etag("subroutineBody");}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String varDec() throws ParseException {StringBuilder bf= new StringBuilder();
  Token vn, vn2, v, c, sc;
  Object t;
    v = jj_consume_token(VAR);
    t = type();
    vn = varName();
    label_6:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_6;
      }
      c = jj_consume_token(COMMA);
      vn2 = varName();
bf.append(vtag("symbol",c)).
      append(vtag("identifier", vn2));
    }
    sc = jj_consume_token(SEMICOLON);
{if ("" != null) return stag("varDec") +
    vtag("keyword",v) +
    xrefType(t) +
    vtag("identifier", vn) +
    bf +
    vtag("symbol", sc) +
    etag("varDec");}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String statements() throws ParseException {StringBuilder bf= new StringBuilder();
  String s;
    label_7:
    while (true) {
      if (jj_2_19(2)) {
        ;
      } else {
        break label_7;
      }
      s = statement();
bf.append(s);
    }
{if ("" != null) return stag("statements") + bf +
    etag("statements");}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String statement() throws ParseException {String s;
    if (jj_2_20(2)) {
      s = letStatement();
{if ("" != null) return s;}
    } else if (jj_2_21(2)) {
      s = ifStatement();
{if ("" != null) return s;}
    } else if (jj_2_22(2)) {
      s = whileStatement();
{if ("" != null) return s;}
    } else if (jj_2_23(2)) {
      s = doStatement();
{if ("" != null) return s;}
    } else if (jj_2_24(2)) {
      s = returnStatement();
{if ("" != null) return s;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String letStatement() throws ParseException {StringBuilder bf=new StringBuilder();
  Token vn, l, lb, rb, eq, sc;
  String e1, e2;
    l = jj_consume_token(LET);
    vn = varName();
    if (jj_2_25(2)) {
      lb = jj_consume_token(LBRAC);
      e1 = expr();
      rb = jj_consume_token(RBRAC);
bf.append(vtag("symbol", lb)).
      append(e1).
      append(vtag("symbol", rb));
    } else {
      ;
    }
    eq = jj_consume_token(EQ);
    e2 = expr();
    sc = jj_consume_token(SEMICOLON);
{if ("" != null) return stag("letStatement") +
    vtag("keyword", l) +
    vtag("identifier", vn) +
    bf +
    vtag("symbol", eq) +
    e2 +
    vtag("symbol", sc) +
    etag("letStatement");}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String ifStatement() throws ParseException {Token i, lp, rp, lc, rc, e, lc2, rc2;
  StringBuilder bf=new StringBuilder();
  String ex, ss, ss2;
    i = jj_consume_token(IF);
    lp = jj_consume_token(LPAREN);
    ex = expr();
    rp = jj_consume_token(RPAREN);
    lc = jj_consume_token(LCURLY);
    ss = statements();
    rc = jj_consume_token(RCURLY);
    if (jj_2_26(2)) {
      e = jj_consume_token(ELSE);
      lc2 = jj_consume_token(LCURLY);
      ss2 = statements();
      rc2 = jj_consume_token(RCURLY);
bf.append(vtag("symbol",e)).
    append(vtag("symbol", lc2)).
    append(ss2).
    append(vtag("symbol", rc2));
    } else {
      ;
    }
{if ("" != null) return stag("ifStatement") +
    vtag("keyword",i) +
    vtag("symbol", lp) + ex + vtag("symbol", rp) +
    vtag("symbol", lc) + ss + vtag("symbol", rc) +
    bf +
    etag("ifStatement");}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String whileStatement() throws ParseException {Token w, lp, rp, lc, rc;
  String ss, e;
    w = jj_consume_token(WHILE);
    lp = jj_consume_token(LPAREN);
    e = expr();
    rp = jj_consume_token(RPAREN);
    lc = jj_consume_token(LCURLY);
    ss = statements();
    rc = jj_consume_token(RCURLY);
{if ("" != null) return stag("whileStatement") +
    vtag("keyword", w) +
    vtag("symbol", lp) +
    e +
    vtag("symbol", rp) +
    vtag("symbol", lc) +
    ss +
    vtag("symbol", rc) +
    etag("whileStatement");}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String doStatement() throws ParseException {Token sc, d;
  String s;
    d = jj_consume_token(DO);
    s = subroutineCall();
    sc = jj_consume_token(SEMICOLON);
{if ("" != null) return stag("doStatement") +
    vtag("keyword", d) +
    s +
    vtag("symbol", sc) +
    etag("doStatement");}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String returnStatement() throws ParseException {Token r, sc;
  String e;
    if (jj_2_27(2)) {
      r = jj_consume_token(RETURN);
      sc = jj_consume_token(SEMICOLON);
{if ("" != null) return stag("returnStatement") +
    vtag("keyword", r) +
    vtag("symbol", sc) +
    etag("returnStatement");}
    } else if (jj_2_28(2)) {
      r = jj_consume_token(RETURN);
      e = expr();
      sc = jj_consume_token(SEMICOLON);
{if ("" != null) return stag("returnStatement") +
    vtag("keyword", r) + e +
    vtag("symbol", sc) +
    etag("returnStatement");}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String expr() throws ParseException {StringBuilder bf= new StringBuilder();
  Token p;
  String t1, t5;
    t1 = term();
    label_8:
    while (true) {
      if (jj_2_29(2)) {
        ;
      } else {
        break label_8;
      }
      p = op();
      t5 = term();
bf.append(vtag("symbol",p) + t5);
    }
{if ("" != null) return stag("expression") +
           t1 + bf + etag("expression");}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String term() throws ParseException {Token u, lp, rp, lb, rb;
  Object t;
  String t3, sc, e89, e99;
    if (jj_2_30(2)) {
      t = integerConstant();
{if ("" != null) return stag("term") +
           vtag("integerConstant", t) + etag("term");}
    } else if (jj_2_31(2)) {
      t = stringConstant();
{if ("" != null) return stag("term") +
           vtag("stringConstant", t) + etag("term");}
    } else if (jj_2_32(2)) {
      t = keywordConstant();
{if ("" != null) return stag("term") +
           vtag("keyword", t) + etag("term");}
    } else if (jj_2_33(2)) {
      t = varName();
      lb = jj_consume_token(LBRAC);
      e89 = expr();
      rb = jj_consume_token(RBRAC);
{if ("" != null) return stag("term") +
           vtag("identifier", t) +
           vtag("symbol",lb) +
           e89 +
           vtag("symbol",rb) +
           etag("term");}
    } else if (jj_2_34(2)) {
      sc = subroutineCall();
{if ("" != null) return stag("term") + sc + etag("term");}
    } else if (jj_2_35(2)) {
      t = varName();
{if ("" != null) return stag("term") +
           vtag("identifier", t) + etag("term");}
    } else if (jj_2_36(2)) {
      lp = jj_consume_token(LPAREN);
      e99 = expr();
      rp = jj_consume_token(RPAREN);
{if ("" != null) return stag("term") +
           vtag("symbol", lp) +
           e99 +
           vtag("symbol", rp) +
           etag("term");}
    } else if (jj_2_37(2)) {
      u = unaryOp();
      t3 = term();
{if ("" != null) return stag("term") +
           vtag("symbol", u) +
           t3 +
           etag("term");}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String subroutineCall() throws ParseException {Token sn, lp, rp;
  String exl;
  String[] sc;
    if (jj_2_38(2)) {
      sn = subroutineName();
      lp = jj_consume_token(LPAREN);
      exl = exprList();
      rp = jj_consume_token(RPAREN);
{if ("" != null) return
    vtag("identifier", sn) +
    vtag("symbol", lp) +
    exl +
    vtag("symbol", rp);}
    } else if (jj_2_39(2)) {
      sc = scopedCall();
      lp = jj_consume_token(LPAREN);
      exl = exprList();
      rp = jj_consume_token(RPAREN);
{if ("" != null) return
    vtag("identifier", sc[0]) +
    vtag("symbol", ".") +
    vtag("identifier", sc[1]) +
    vtag("symbol", lp) +
    exl +
    vtag("symbol", rp);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String exprList() throws ParseException {StringBuilder bf= new StringBuilder();
  String e2, e1=null;
  Token c;
    if (jj_2_41(2)) {
      e1 = expr();
      label_9:
      while (true) {
        if (jj_2_40(2)) {
          ;
        } else {
          break label_9;
        }
        c = jj_consume_token(COMMA);
        e2 = expr();
bf.append(vtag("symbol", c)).append(e2);
      }
    } else {
      ;
    }
if (e1 != null) {
      {if ("" != null) return stag("expressionList") +
             e1 + bf + etag("expressionList");}
    } else {
      {if ("" != null) return stag("expressionList") +
             etag("expressionList");}
    }
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String[] scopedCall() throws ParseException {Token t;
    t = jj_consume_token(SCOPEDINVOKER);
//System.out.println("scopedinvoker= " + t.image);
    {if ("" != null) return t.image.split("\u005c\u005c.");}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public Token op() throws ParseException {Token t;
    if (jj_2_42(2)) {
      t = jj_consume_token(PLUS);
{if ("" != null) return t;}
    } else if (jj_2_43(2)) {
      t = jj_consume_token(MINUS);
{if ("" != null) return t;}
    } else if (jj_2_44(2)) {
      t = jj_consume_token(STAR);
{if ("" != null) return t;}
    } else if (jj_2_45(2)) {
      t = jj_consume_token(SLASH);
{if ("" != null) return t;}
    } else if (jj_2_46(2)) {
      t = jj_consume_token(AND);
{if ("" != null) return t;}
    } else if (jj_2_47(2)) {
      t = jj_consume_token(BAR);
{if ("" != null) return t;}
    } else if (jj_2_48(2)) {
      t = jj_consume_token(LT);
{if ("" != null) return t;}
    } else if (jj_2_49(2)) {
      t = jj_consume_token(GT);
{if ("" != null) return t;}
    } else if (jj_2_50(2)) {
      t = jj_consume_token(EQ);
{if ("" != null) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public Token unaryOp() throws ParseException {Token t;
    if (jj_2_51(2)) {
      t = jj_consume_token(MINUS);
{if ("" != null) return t;}
    } else if (jj_2_52(2)) {
      t = jj_consume_token(TILDA);
{if ("" != null) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public Token integerConstant() throws ParseException {Token t;
    t = jj_consume_token(NUMBER);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public String stringConstant() throws ParseException {String s; Token t;
    t = jj_consume_token(QSTRING);
s=t.image;
    {if ("" != null) return s.substring(1, s.length()-1);}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public Token keywordConstant() throws ParseException {Token t;
    if (jj_2_53(2)) {
      t = jj_consume_token(TRUE);
{if ("" != null) return t;}
    } else if (jj_2_54(2)) {
      t = jj_consume_token(FALSE);
{if ("" != null) return t;}
    } else if (jj_2_55(2)) {
      t = jj_consume_token(NULL);
{if ("" != null) return t;}
    } else if (jj_2_56(2)) {
      t = jj_consume_token(THIS);
{if ("" != null) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public Token subroutineName() throws ParseException {Token t;
    t = jj_consume_token(IDENTIFIER);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public Token className() throws ParseException {Token t;
    t = jj_consume_token(IDENTIFIER);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
//
  final public Token varName() throws ParseException {Token t;
    t = jj_consume_token(IDENTIFIER);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_3_50()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_scan_token(BAR)) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(LCURLY)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(SCOPEDINVOKER)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_scan_token(LBRAC)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_31()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_30()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_29()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_12()) return true;
    if (jj_scan_token(LBRAC)) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(METHOD)) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_14()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(RETURN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(CONSTRUCTOR)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  private boolean jj_3_56()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(QSTRING)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(FIELD)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_scan_token(TILDA)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) return true;
    }
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(STATIK)) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    if (jj_3R_14()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JackParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[56];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JackParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JackParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JackParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JackParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JackParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JackParser(JackParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JackParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 56; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
